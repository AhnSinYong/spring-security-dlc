<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
		 xmlns:b="http://www.springframework.org/schema/beans"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
		 xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<util:map id="config" key-type="java.lang.String" value-type="java.lang.Object">
		<!-- 체인(포워드) 방식의 화면 요청 여부 -->
		<b:entry key="chain" value="true"/>
		<b:entry key="loginFormUrl" value="/member/login"/>
		<b:entry key="errorPage" value="/404"/>

		<!-- 로그인 후 페이지이동 방식 설정 -->
		<b:entry key="alwaysUseDefaultTargetUrl" value="false"/>
		<b:entry key="defaultTargetUrl" value="/member/mypage"/>

		<b:entry key="usernameParameter" value="user_id"/>
		<b:entry key="passwordParameter" value="password"/>
		<b:entry key="loginProcessingUrl" value="/member/signin"/>

		<b:entry key="logoutSuccessUrl" value="/member/login"/>
		<b:entry key="logoutProcessingUrl" value="/member/signout"/>
		<b:entry key="cookiesToClear" value="JSESSIONID"/>

		<!-- 세션이 만료되었을때 이동할 페이지 -->
		<b:entry key="expiredUrl" value="/404"/>

		<!-- 중복로그인 설정 -->
		<b:entry key="maximumSessions" value="1"/>
		<b:entry key="exceptionIfMaximumExceeded" value="false"/>
		<b:entry key="decisionUrl" value=""/>

	</util:map>

	<http pattern="/favicon.ico" security="none" />
	<http pattern="/resources/**" security="none" />
	<http pattern="/404" security="none" />
	<http pattern="/hello" security="none" />

	<http auto-config="false" use-expressions="true" create-session="always" entry-point-ref="authenticationEntryPoint">
		<intercept-url pattern="/member/login" access="permitAll" />
		<intercept-url pattern="/**" access="hasAnyRole('ROLE_USER')" />

		<!-- 중복로그인 여부를 판단하기 위한 필터 -->
		<custom-filter ref="concurrentSessionDecisionFilter" position="CONCURRENT_SESSION_FILTER" />
		<custom-filter ref="concurrentSessionFilter" after="CONCURRENT_SESSION_FILTER" />
		<custom-filter ref="usernamePasswordAuthenticationFilter" position="FORM_LOGIN_FILTER" />
		<custom-filter ref="logoutFilter" position="LOGOUT_FILTER" />

		<session-management session-authentication-strategy-ref="sas"/>
		<csrf disabled="true"/>
	</http>



	<!-- 스프링 시큐리티에서 기본적으로 사용되는 authenticationEntryPoint 구현 클래스
	<b:bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<b:constructor-arg name="loginFormUrl" value="/member/login" />
	</b:bean>
	--> <!-- ajax 구현을 위한 커스텀 헨들러 적용 -->
	<b:bean id="authenticationEntryPoint" class="org.syaku.spring.security.handler.UnauthorizedAccessHandler">
		<b:constructor-arg name="loginFormUrl" value="#{config.loginFormUrl}" />
		<b:property name="chain" value="#{config.chain}" />
	</b:bean>


	<!-- ajax 구현을 위한 커스텀 헨들러 적용 -->
	<b:bean id="requestCache" class="org.springframework.security.web.savedrequest.HttpSessionRequestCache"/>
	<b:bean id="loginSuccessHandler" class="org.syaku.spring.security.handler.SignInSuccessHandler">
		<b:property name="alwaysUseDefaultTargetUrl" value="#{config.alwaysUseDefaultTargetUrl}" />
		<b:property name="defaultTargetUrl" value="#{config.defaultTargetUrl}" />
		<b:property name="chain" value="#{config.chain}" />
		<b:property name="requestCache" ref="requestCache" />
	</b:bean>

	<b:bean id="loginFailureHandler" class="org.syaku.spring.security.handler.SignInFailureHandler" />
	<b:bean id="accessFailureHandler" class="org.syaku.spring.security.handler.AccessFailureHandler">
		<b:constructor-arg name="errorPage" value="#{config.errorPage}" />
		<b:constructor-arg name="loginFormUrl" value="#{config.loginFormUrl}" />
	</b:bean>
	<!-- ajax 구현을 위한 커스텀 헨들러 적용 -->

	<b:bean id="usernamePasswordAuthenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<b:property name="authenticationManager" ref="authenticationManager" />
		<b:property name="sessionAuthenticationStrategy" ref="sas" />
		<b:property name="usernameParameter" value="#{config.usernameParameter}" />
		<b:property name="passwordParameter" value="#{config.passwordParameter}" />
		<b:property name="filterProcessesUrl" value="#{config.loginProcessingUrl}" />

		<!-- ajax 구현을 위한 커스텀 헨들러 적용 -->
		<b:property name="authenticationFailureHandler" ref="loginFailureHandler" />
		<b:property name="authenticationSuccessHandler" ref="loginSuccessHandler" />
	</b:bean>


	<!-- 스프링 시큐리티에서 기본으로 사용하는 중복로그인 체크 필터 -->
	<b:bean id="concurrentSessionFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<b:constructor-arg name="expiredUrl" value="#{config.expiredUrl}" />
		<b:constructor-arg name="sessionRegistry" ref="sessionRegistry" />
	</b:bean>

	<!-- 중복로그인 여부를 판단하기 위한 필터 -->
	<b:bean id="concurrentSessionDecisionFilter" class="org.syaku.spring.security.handler.ConcurrentSessionDecisionFilter">
		<b:constructor-arg name="sessionRegistry" ref="sessionRegistry" />
		<b:constructor-arg name="decisionUrl" value="#{config.decisionUrl}" /><!-- ajax 아닌 경우 필요 -->
	</b:bean>


	<!-- SESSION MANAGEMENT -->
	<b:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />
	<b:bean id="sas" class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
		<b:constructor-arg>
			<b:list>

				<b:bean class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
					<b:constructor-arg ref="sessionRegistry"/>
					<!--
					세션을 생성할 수 있는 수 -1 무제한으로 생성할 수 있으며 1로 설정할 경우 다음과 같이 처리된다.
					1) A 계정으로 로그인 -> 새션생성
					2) 다른 컴퓨터에서 A 계정으로 로그인 -> 새션생성 후 1번 세션은 제거된다. 즉 1번에서 로그인된 사용자는 로그아웃 처리된다.
					-->
					<b:property name="maximumSessions" value="1" />
					<!--
					설정된 세션 수를 넘지 못하게 할 수 있다. maximumSessions = 1 이고 true로 설정한 경우 다음과 같이 처리된다.
					기존에 로그인 사용자가 있는 경우 더이상 같은 계정으로 로그인할 수 없게 된다. 기존에 로그인 사용자가 로그아웃하거나 세션이 파기되면 로그인할 수 있다.
					만약 로그아웃하지 않고 브라우저들 닫을 경우(그외 문제로 세션을 잊어벼릴 경우) 로그아웃으로 처리되지 않기 때문에 세션이 파기될때까지 다른 사용자는 로그인 할 수 없다.
					세션타임아웃이 0이라면 절대 로그인할 수 없게 된다...
					-->
					<b:property name="exceptionIfMaximumExceeded" value="false" />
				</b:bean>

				<b:bean class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy" />

				<b:bean class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
					<b:constructor-arg ref="sessionRegistry"/>
				</b:bean>

			</b:list>
		</b:constructor-arg>
	</b:bean>
	<!-- SESSION MANAGEMENT -->

	<!-- 스프링 시큐리티에서 기본으로 사용하는 로그아웃 헨틀러
	<b:bean id="logoutSuccessHandler" class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler" />
 	-->
	<b:bean id="logoutSuccessHandler" class="org.syaku.spring.security.handler.SignOutSuccessHandler">
		<b:property name="alwaysUseDefaultTargetUrl" value="#{config.alwaysUseDefaultTargetUrl}" />
		<b:property name="defaultTargetUrl" value="#{config.defaultTargetUrl}" />
	</b:bean>

	<!--
	로그아웃 필터 설정

	커스텀필터를 사용하기 위해 쿠키제거 설정을 직접해햐한다. -->
	<b:bean id="cookieClearingLogoutHandler" class="org.springframework.security.web.authentication.logout.CookieClearingLogoutHandler">
		<b:constructor-arg value="#{config.cookiesToClear}" />
	</b:bean>
	<b:bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<b:constructor-arg name="logoutSuccessHandler" ref="logoutSuccessHandler" />
		<b:constructor-arg name="handlers">
			<b:list>
				<b:bean id="securityContextLogoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
				<b:ref bean="cookieClearingLogoutHandler"/>
				<!-- 로그아웃 후 필요한 헨들러를 추가할 수 있다 -->
			</b:list>
		</b:constructor-arg>
		<b:property name="filterProcessesUrl" value="#{config.logoutProcessingUrl}"/>
	</b:bean>
	<!-- 로그아웃 필터 설정 -->

	<authentication-manager alias="authenticationManager">
		<authentication-provider>
			<user-service>
				<user name="user" password="1234" authorities="ROLE_USER"/>
				<user name="test" password="1234" authorities="ROLE_USER"/>
			</user-service>
		</authentication-provider>
	</authentication-manager>
</b:beans>
